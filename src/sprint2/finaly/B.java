package sprint2.finaly;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

/*
-- –ü—Ä–∏–Ω—Ü–∏–ø –†–∞–±–æ—Ç—ã --
–°–Ω–∞—á–∞–ª —á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ –º–µ—Ç–æ–¥ calculate, –¥–∞–ª–µ–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç—ç–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
–±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å—Å—è —á–∏—Å–ª–∞. –°—Ç—Ä–æ–∫—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—Ä–∞—â–∞—é –≤ –º–∞—Å—Å–∏–≤, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ —É–¥–æ–±–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è.
–ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–º–æ–∂–Ω–æ –±—ã–ª–æ —á–µ—Ä–µ–∑ switch) –Ω–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏, –≤—ã–¥–µ—Ä–≥–∏–≤–∞—é 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞,
–ø—Ä–æ–∏–∑–≤–æ—â—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª—è—é –æ–±—Ä–∞—Ç–Ω–æ.

–í–ê–ñ–ù–û! double val = ((double) (second / (double) first)) –∏ digits.push((int) Math.floor(val)); - –Ω—É–∂–Ω—ã –¥–ª—è —Å–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
–∫ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ.

–í –∫–æ–Ω—Ü–µ –ª–æ–≥–∏–∫–∏ –≤–æ–∑—Ä–∞—â–∞—é —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –≤—ã–≤–æ–∂—É –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å

--–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ --
–ò–∑ —Å—Ç–µ–∫–∞ –≤—ã–Ω–∏–º–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç LIFO
–¢–∞–∫ –∫–∞–∫ –≤ –ø–æ–ª—å—Å–∫–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ª–µ–≤–∞, –∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–¥—ë—Ç –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –º–∞—Å—Å–∏–≤—É
[5 6 + 3 2 * +] --- > [5 6] -(–æ–ø–µ—Ä–∞—Ü–∏—è +)-> [11] --> [11 3 2] -(–æ–ø–µ—Ä–∞—Ü–∏—è *)-> [11 6] -(–æ–ø–µ—Ä–∞—Ü–∏—è +)- > [17]
Array üëÜ             Stack üëÜ

--–°–ª–æ–∂–Ω–æ—Å—Ç—å --
O(n) - –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º, –ø–æ–¥–∞–Ω–Ω—ã–º –Ω–∞ –≤—Ö–æ–¥

--–ü–∞–º—è—Ç—å --
O(n) - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ n —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–æ—Å–∏—Ç—å
–≤ —Å—Ç–µ–∫
 */

//87134561
public class B {
    public static void main(String[] args) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {
            String input = reader.readLine();
            System.out.println(calculate(input));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private static int calculate(String input) {
        Stack<Integer> digits = new Stack<>();

        String[] array = input.split(" ");

        int value;
        int first;
        int second;

        for (String c : array) {

            if (c.matches(".*\\d")){
                digits.push(Integer.parseInt(c));
            } else {
                first = digits.pop();
                second = digits.pop();
                switch (c) {
                    case "+":
                        value = second + first;
                        digits.push(value);
                        break;
                    case "-":
                        value = second - first;
                        digits.push(value);
                        break;
                    case "*":
                        value = second * first;
                        digits.push(value);
                        break;
                    case "/":
                        digits.push(Math.floorDiv(second, first));
                        break;
                }
            }
        }
        return digits.pop();
    }
}
